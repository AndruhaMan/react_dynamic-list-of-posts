{"version":3,"sources":["components/PostInfo.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/CommentInfo.tsx","components/CommentsList.tsx","components/PostDetails.tsx","api/comments.ts","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostInfo","post","selectedPost","setSelectedPost","isSelected","id","title","className","type","cn","onClick","PostsList","posts","map","Loader","NewCommentForm","createComment","isLoading","useState","name","setName","email","setEmail","body","setBody","isNameError","setIsNameError","isEmailError","setIsEmailError","isBodyError","setIsBodyError","onSubmit","event","preventDefault","trimedName","trim","trimedEmail","trimedBody","htmlFor","placeholder","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","CommentInfo","comment","removeComment","href","CommentsList","comments","PostDetails","setComments","isError","setIsError","setIsLoading","isFormOpen","setIsFormOpen","isFormLoading","setIsFormLoading","useEffect","postId","catch","finally","length","commentId","filter","deleteComment","preparedComment","postComment","postedComment","UserSelector","users","selectedUser","setSelectedUser","isDropdownActive","setIsDropdownActive","hasUserSelected","user","toggleDropdown","currentState","role","handleUserSelect","App","setUsers","setPosts","userId","isLoadedSuccessfully","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba9d5c0c.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post,\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostInfo: React.FC<Props> = ({\n  post,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const isSelected = () => post.id === selectedPost?.id;\n  const handlePostSelect = () => {\n    if (isSelected()) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  };\n\n  return (\n    <tr data-cy=\"Post\" key={post.id}>\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn(\n            'button',\n            'is-link',\n            { 'is-light': !isSelected() },\n          )}\n          onClick={handlePostSelect}\n        >\n          {isSelected()\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostInfo } from './PostInfo';\n\ntype Props = {\n  posts: Post[]\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostInfo\n              key={post.id}\n              post={post}\n              selectedPost={selectedPost}\n              setSelectedPost={setSelectedPost}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  createComment: (comment: CommentData) => void,\n  isLoading: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  createComment,\n  isLoading,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n  const [isNameError, setIsNameError] = useState<boolean>(false);\n  const [isEmailError, setIsEmailError] = useState<boolean>(false);\n  const [isBodyError, setIsBodyError] = useState<boolean>(false);\n\n  const handleNameChanging = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setIsNameError(false);\n  };\n\n  const handleEmailChanging = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setIsEmailError(false);\n  };\n\n  const handleBodyChanging = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setBody(event.target.value);\n    setIsBodyError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const trimedName = name.trim();\n    const trimedEmail = email.trim();\n    const trimedBody = body.trim();\n\n    if (!trimedName) {\n      setIsNameError(true);\n    }\n\n    if (!trimedEmail) {\n      setIsEmailError(true);\n    }\n\n    if (!trimedBody) {\n      setIsBodyError(true);\n    }\n\n    if (trimedName && trimedEmail && trimedBody) {\n      setBody('');\n\n      createComment({\n        name: trimedName,\n        email: trimedEmail,\n        body: trimedBody,\n      });\n    }\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={name}\n            onChange={handleNameChanging}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={email}\n            onChange={handleEmailChanging}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'input',\n              { 'is-danger': isBodyError },\n            )}\n            value={body}\n            onChange={handleBodyChanging}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Record<string, unknown> | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Record<string, unknown>) => (\n    request<T>(url, 'POST', data)\n  ),\n  patch: <T>(url: string, data: Record<string, unknown>) => (\n    request<T>(url, 'PATCH', data)\n  ),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  removeComment: (id: number) => void,\n};\n\nexport const CommentInfo: React.FC<Props> = ({\n  comment,\n  removeComment,\n}) => {\n  const {\n    id,\n    name,\n    email,\n    body,\n  } = comment;\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n      key={id}\n    >\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => removeComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { CommentInfo } from './CommentInfo';\n\ntype Props = {\n  comments: Comment[],\n  removeComment: (id: number) => void,\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  removeComment,\n}) => (\n  <>\n    {comments.map(comment => (\n      <CommentInfo\n        key={comment.id}\n        comment={comment}\n        removeComment={removeComment}\n      />\n    ))}\n  </>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments, postComment } from '../api/comments';\nimport { Comment, CommentData } from '../types/Comment';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n}) => {\n  const {\n    id,\n    title,\n    body,\n  } = post;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\n  const [isFormLoading, setIsFormLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsFormOpen(false);\n    setIsError(false);\n\n    getComments(id)\n      .then(setComments)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, [id]);\n\n  const createComment = (\n    comment: CommentData,\n  ) => {\n    const preparedComment = {\n      postId: post.id,\n      name: comment.name,\n      email: comment.email,\n      body: comment.body,\n    };\n\n    setIsFormLoading(true);\n    setIsError(false);\n\n    postComment(preparedComment)\n      .then((postedComment) => setComments([...comments, postedComment]))\n      .catch(() => setIsError(true))\n      .finally(() => setIsFormLoading(false));\n  };\n\n  const removeComment = (commentId: number) => {\n    setIsError(false);\n    setComments(comments.filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId)\n      .catch(() => setIsError(true));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isError && !isLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              <CommentsList\n                comments={comments}\n                removeComment={removeComment}\n              />\n            </>\n          )}\n\n          {!isLoading && !isFormOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormOpen && (\n          <NewCommentForm\n            createComment={createComment}\n            isLoading={isFormLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function postComment(comment: Omit<Comment, 'id'>) {\n  return client.post<Comment>('/comments', comment);\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  const hasUserSelected = (user: User) => (\n    selectedUser && (selectedUser.id === user.id)\n  );\n\n  const toggleDropdown = () => {\n    setIsDropdownActive(currentState => !currentState);\n  };\n\n  const handleUserSelect = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    event.preventDefault();\n    toggleDropdown();\n\n    if (!hasUserSelected(user)) {\n      setSelectedUser(user);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn(\n        'dropdown',\n        { 'is-active': isDropdownActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': hasUserSelected(user) },\n              )}\n              onClick={(event) => handleUserSelect(event, user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsError(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  const isLoadedSuccessfully = selectedUser\n    && !isLoading\n    && !isError;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {selectedUser && isLoading && (\n                  <Loader />\n                )}\n\n                {!isLoading && isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isLoadedSuccessfully\n                  && posts.length === 0\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {isLoadedSuccessfully\n                  && posts.length > 0\n                  && (\n                    <PostsList\n                      posts={posts}\n                      selectedPost={selectedPost}\n                      setSelectedPost={setSelectedPost}\n                    />\n                  )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}